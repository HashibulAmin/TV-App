import React, { useEffect, useState } from 'react';
import ReactPlayer from 'react-player';

const CHANNEL_API = 'http://tv.roarzone.info/app.php?per=true';
const AUTH_API_BASE = 'http://tv.roarzone.info/';
const STREAM_HOST = 'http://peer19.roarzone.info:8080/';

export default function App() {
  const [channels, setChannels] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filtered, setFiltered] = useState([]);
  const [currentUrl, setCurrentUrl] = useState('');
  const [loadingToken, setLoadingToken] = useState(false);

  // Fetch channel list
  useEffect(() => {
    fetch(CHANNEL_API)
      .then(res => res.json())
      .then(data => {
        setChannels(data);
        setFiltered(data);
      })
      .catch(console.error);
  }, []);

  // Filter channels
  useEffect(() => {
    const f = channels.filter(ch =>
      ch.ch_name.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFiltered(f);
  }, [searchTerm, channels]);

  // Handle channel click: get fresh token and build URL
  const handleSelect = async (ch) => {
    setLoadingToken(true);
    try {
      const res = await fetch(`${AUTH_API_BASE}${ch.ch_id}`, {
        method: 'POST',
        headers: { 'Authorization': 'Basic ' + btoa('admin:admin123') },
      });
      let path = await res.text();
      if (path.startsWith('/')) path = path.slice(1);
      setCurrentUrl(`${STREAM_HOST}${path}`);
    } catch (e) {
      console.error(e);
    } finally {
      setLoadingToken(false);
    }
  };

  // Styles
  const styles = {
    app: { padding: '20px', fontFamily: 'sans-serif' },
    header: { display: 'flex', alignItems: 'center', gap: '20px' },
    playerWrap: { flex: 1, position: 'relative', paddingTop: '56.25%' },
    playerInner: { position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' },
    search: { padding: '8px', fontSize: '16px', width: '200px' },
    grid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(150px, 1fr))', gap: '16px', marginTop: '20px' },
    item: { cursor: 'pointer', textAlign: 'center' },
    img: { width: '100%', height: 'auto', borderRadius: '4px' },
    label: { marginTop: '8px', fontSize: '14px' },
  };

  return (
    <div style={styles.app}>
      <div style={styles.header}>
        <div style={styles.playerWrap}>
          {currentUrl ? (
            <ReactPlayer
              url={currentUrl}
              controls
              width="100%"
              height="100%"
              style={styles.playerInner}
            />
          ) : (
            <div style={{ ...styles.playerInner, background: '#000', color: '#fff', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              Select a channel...
            </div>
          )}
        </div>
        <input
          type="text"
          placeholder="Search channels..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          style={styles.search}
        />
      </div>

      <div style={styles.grid}>
        {filtered.map(ch => (
          <div key={ch.ch_id} style={styles.item} onClick={() => handleSelect(ch)}>
            <img
              src={`http://tv.roarzone.info${ch.img_url}`}
              alt={ch.ch_name}
              style={styles.img}
            />
            <div style={styles.label}>{ch.ch_name}</div>
          </div>
        ))}
      </div>

      {loadingToken && <div style={{ marginTop: '10px' }}>Loading stream...</div>}
    </div>
  );
}
